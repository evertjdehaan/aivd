import numpy as np


def _get_code_array(str_code):
    # Convert the string to an array of numbers
    return np.array(list(str_code), int)


def solve_part1(str_code):
    # Convert the string to an array of numbers
    code_array = _get_code_array(str_code)

    # Add the first number to the end of the array (as wrap around is allowed)
    code_array_wrap = np.append(code_array, code_array[0])

    # Determine if the number is the same as the next one
    code_diff = np.diff(code_array_wrap)

    # Determine the sum of the elements the same as the next one
    return sum(np.where(code_diff == 0, code_array, 0))


def solve_part2(str_code):
    # The problem is the same as the first one, but the numbers are further
    # apart.

    # Convert the string to an array of numbers
    code_array = _get_code_array(str_code)

    # Split the array midway
    mid_way = int(len(code_array)/2)
    code_array_1 = code_array[0:mid_way]
    code_array_2 = code_array[mid_way:]

    # Determine the sum of the elements the same in both halve arrays
    return sum(np.where(code_array_1 == code_array_2, code_array_1, 0)) * 2


if __name__ == '__main__':
    # The puzzle input
    full_code = '494751136895345894732582362629576539599184296195318162664695189393364372585778868512194863927652788149779748657989318645936221887731542718562643272683862627537378624843614831337441659741281289638765171452576466381314558821636595394981788588673443769343597851883955668818165723174939893841654914556681324133667446412138511724424292394454166623639872425168644336248217213826339741267546823779383343362789527461579565822966859349777937921933694912369552152772735167832762563719664315456987186713541153781499646178238762644186484381142249926194743713139262596264878458636595896487362658672224346241358667234115974528626523648311919886566497837217169673923935143386823757293148719377821517314629812886912412829924484513493885672343964151252433622341141661523814465991516961684511941471572895453711624986269342398786175846925783918686856442684489873327497698963658862856336682422797551251489126661954848572297228765445646745256499679451426358865477844467458533962981852292513358871483321161973583245698763531598395467675529181496911117769834127516441369261275244225978893617456524385518493112272169767775861256649728253754964675812534546226295535939697352141217337346738553495616832783757866928174519145357234834584788253893618549484385733283627199445369658339175644484859385884574943219267922729967571943843794565736975716174727852348441254492886794362934343868643337828637454277582276962353246357835493338372219824371517526474283541714897994127864461433627894831268659336264234436872715374727211764167739169341999573855627775114848275268739159272518673316753672995297888734844388928439859359992475637439771269232916542385876779616695129412366735112593669719335783511355773814685491876721452994714318863716542473187246351548626157775143333161422867924437526253865859969947366972895674966845993244925218766937543487875485647329995285821739359369998935331986126873726737672159265827566443794515755939813676194755474477224152139987944419463371386499841415227734673733555261543871359797796529847861748979527579985757964742667473767269248335229836818297477665453189662485548925521497365877771665365728224394427883312135322325169141784'

    # solve problem 1
    assert solve_part1('1122') == 3
    assert solve_part1('1111') == 4
    assert solve_part1('1234') == 0
    assert solve_part1('91212129') == 9
    print(solve_part1(full_code))

    # Solve problem 2
    assert solve_part2('1212') == 6
    assert solve_part2('1221') == 0
    assert solve_part2('123425') == 4
    assert solve_part2('123123') == 12
    assert solve_part2('12131415') == 4
    print(solve_part2(full_code))
